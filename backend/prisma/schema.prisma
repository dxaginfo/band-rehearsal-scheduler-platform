// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  passwordHash        String
  firstName           String
  lastName            String
  phoneNumber         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relations
  createdGroups       Group[]               @relation("GroupCreator")
  groupMemberships    GroupMember[]
  weeklyAvailability  WeeklyAvailability[]
  availabilityExceptions AvailabilityException[]
  createdRehearsals   Rehearsal[]           @relation("RehearsalCreator")
  rehearsalAttendees  RehearsalAttendee[]
  uploadedResources   RehearsalResource[]   @relation("ResourceUploader")
  rehearsalNotes      RehearsalNote[]
  notifications       Notification[]
  notificationPreferences NotificationPreference[]
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  createdBy   User          @relation("GroupCreator", fields: [createdById], references: [id])
  members     GroupMember[]
  rehearsals  Rehearsal[]
}

model GroupMember {
  id          String        @id @default(uuid())
  groupId     String
  userId      String
  role        Role          @default(MEMBER)
  joinDate    DateTime      @default(now())
  status      MemberStatus  @default(PENDING)
  
  // Relations
  group       Group         @relation(fields: [groupId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  
  @@unique([groupId, userId])
}

model WeeklyAvailability {
  id          String        @id @default(uuid())
  userId      String
  dayOfWeek   Int           // 0-6 for Sunday-Saturday
  startTime   DateTime
  endTime     DateTime
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  
  @@unique([userId, dayOfWeek, startTime, endTime])
}

model AvailabilityException {
  id          String        @id @default(uuid())
  userId      String
  exceptionDate DateTime
  isAvailable Boolean
  startTime   DateTime?
  endTime     DateTime?
  reason      String?
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  
  @@unique([userId, exceptionDate])
}

model Rehearsal {
  id          String        @id @default(uuid())
  groupId     String
  title       String
  description String?
  location    String
  startTime   DateTime
  endTime     DateTime
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      RehearsalStatus @default(SCHEDULED)
  
  // Relations
  group       Group         @relation(fields: [groupId], references: [id])
  createdBy   User          @relation("RehearsalCreator", fields: [createdById], references: [id])
  attendees   RehearsalAttendee[]
  resources   RehearsalResource[]
  notes       RehearsalNote[]
}

model RehearsalAttendee {
  id            String            @id @default(uuid())
  rehearsalId   String
  userId        String
  status        AttendanceStatus  @default(NO_RESPONSE)
  responseTime  DateTime?
  absenceReason String?
  
  // Relations
  rehearsal     Rehearsal         @relation(fields: [rehearsalId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  
  @@unique([rehearsalId, userId])
}

model RehearsalResource {
  id            String        @id @default(uuid())
  rehearsalId   String
  title         String
  description   String?
  fileUrl       String
  fileType      String
  uploadedById  String
  uploadedAt    DateTime      @default(now())
  
  // Relations
  rehearsal     Rehearsal     @relation(fields: [rehearsalId], references: [id])
  uploadedBy    User          @relation("ResourceUploader", fields: [uploadedById], references: [id])
}

model RehearsalNote {
  id            String        @id @default(uuid())
  rehearsalId   String
  userId        String
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  rehearsal     Rehearsal     @relation(fields: [rehearsalId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Notification {
  id                String              @id @default(uuid())
  userId            String
  type              NotificationType
  content           String
  relatedEntityId   String?             // Could be rehearsalId, resourceId, etc.
  read              Boolean             @default(false)
  createdAt         DateTime            @default(now())
  sentAt            DateTime?
  
  // Relations
  user              User                @relation(fields: [userId], references: [id])
}

model NotificationPreference {
  id                  String                @id @default(uuid())
  userId              String
  notificationType    NotificationType
  emailEnabled        Boolean               @default(true)
  pushEnabled         Boolean               @default(false)
  advanceNoticeMinutes Int                  @default(60)
  
  // Relations
  user                User                  @relation(fields: [userId], references: [id])
  
  @@unique([userId, notificationType])
}

// Enums
enum Role {
  ADMIN
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum RehearsalStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

enum AttendanceStatus {
  ATTENDING
  DECLINED
  TENTATIVE
  NO_RESPONSE
}

enum NotificationType {
  REHEARSAL_REMINDER
  SCHEDULE_CHANGE
  NEW_RESOURCE
  ATTENDANCE_UPDATE
  GROUP_INVITATION
  GENERAL_ANNOUNCEMENT
}